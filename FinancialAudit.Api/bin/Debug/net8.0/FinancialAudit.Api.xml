<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FinancialAudit.Api</name>
    </assembly>
    <members>
        <member name="M:FinancialAuditApi.Controllers.FileController.ExportTransactions(FinancialAudit.Application.DTOs.ExportRequestDto)">
            <summary>
            Exporta todas as transações no formato especificado (CSV ou XLSX).
            </summary>
            <param name="request">
            Objeto que contém o formato de exportação desejado (CSV ou XLSX). 
            Informe o formato como "csv" para CSV ou "xlsx" para Excel.
            Exemplo de formato aceito:
            
            ```json
            {
                "format": "csv"
            }
            ```
            </param>
            <returns>
            Retorna um arquivo contendo as transações no formato solicitado.
            Se o formato for CSV, o arquivo será retornado como 'transactions_{timestamp}.csv'.
            Se o formato for XLSX, o arquivo será retornado como 'transactions_{timestamp}.xlsx'.
            
            Exemplo de resposta bem-sucedida (200 OK):
            - Cabeçalho Content-Type: "text/csv" ou "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            - Corpo: Arquivo binário correspondente ao formato solicitado.
            
            Exemplo de erro (400 Bad Request):
            - Quando o formato não é especificado ou é inválido.
            - Corpo da resposta: 
            ```json
            {
                "success": false,
                "message": "Formato inválido. Deve ser 'csv' ou 'xlsx'."
            }
            ```
            
            Exemplo de erro (404 Not Found):
            - Quando não há transações disponíveis para exportação.
            - Corpo da resposta: 
            ```json
            {
                "success": false,
                "message": "Nenhuma transação encontrada para exportar."
            }
            ```
            </returns>
        </member>
        <member name="M:FinancialAuditApi.Controllers.FileController.ImportTransactions(Microsoft.AspNetCore.Http.IFormFile,System.String)">
             <summary>
             Importa transações de um arquivo enviado. 
             O arquivo deve ser no formato CSV ou XLSX, e deve conter as colunas: UserId, Amount, Type, e Date.
             Transações sem um usuário correspondente na base de dados serão ignoradas e relatadas no resultado.
             </summary>
             <param name="file">O arquivo contendo as transações a serem importadas.</param>
             <param name="format">O formato do arquivo, podendo ser "csv" ou "xlsx".</param>
             <returns>
             200 OK: Retorna o resultado da importação, incluindo uma lista das transações importadas com sucesso
             e uma lista das transações ignoradas (onde o UserId não foi encontrado no banco de dados).
             400 Bad Request: Se o arquivo estiver em um formato inválido ou se ocorrer algum erro de validação.
             404 Not Found: Se não for encontrado o arquivo ou um formato inválido for especificado.
             </returns>
             <remarks>
             Exemplos de formatos de arquivo suportados:
             
             Arquivo CSV:
             ```csv
             UserId,Amount,Type,Date
             25ec78e9-5dd3-409f-aef1-44c715707fa1,5000.00,Deposit,20/10/2024 13:21:14
             25ec78e9-5dd3-409f-aef1-44c715707fa1,100.00,Purchase,20/10/2024 13:21:14
             ```
             
             Arquivo XLSX:
             - As colunas devem ser as mesmas do formato CSV.
             - O formato de data deve ser `dd/MM/yyyy HH:mm:ss`.
            
             Exemplo de requisição via *form-data*:
             ```http
             POST /api/file/import?format=csv
             Content-Type: multipart/form-data
            
             File: transactions.csv
             ```
             </remarks>
        </member>
        <member name="M:FinancialAuditApi.Controllers.TransactionsController.GetAllTransactions(System.Int32,System.Int32)">
            <summary>
            Retorna uma lista paginada de transações.
            </summary>
            <param name="pageNumber">O número da página a ser retornada. O valor padrão é 1.</param>
            <param name="pageSize">O número de itens por página. O valor padrão e máximo é 10.</param>
            <returns>
            200 OK: Retorna a lista paginada de transações.
            204 No Content: Se não houver transações disponíveis.
            400 Bad Request: Se ocorrer algum erro durante o processamento.
            </returns>
            <remarks>
            Exemplo de requisição para recuperar a primeira página com 10 transações:
            
            GET /api/Transactions?pageNumber=1&amp;pageSize=10
            
            Exemplo de resposta com transações paginadas:
            
            ```json
            {
                "success": true,
                "data": {
                    "items": [
                        {
                            "id": 1,
                            "userId": 123,
                            "amount": 150.75,
                            "type": "Deposit",
                            "timestamp": "2024-01-15T10:30:00Z"
                        },
                        {
                            "id": 2,
                            "userId": 123,
                            "amount": 50.00,
                            "type": "Withdrawal",
                            "timestamp": "2024-01-16T11:00:00Z"
                        }
                    ],
                    "totalCount": 2,
                    "pageSize": 10,
                    "currentPage": 1,
                    "totalPages": 1
                }
            }
            ```
            </remarks>
        </member>
        <member name="M:FinancialAuditApi.Controllers.TransactionsController.GetUserBalance(System.Guid)">
            <summary>
            Retorna o saldo atual de um usuário específico.
            </summary>
            <param name="userId">ID do usuário cujo saldo será retornado.</param>
            <returns>
            200 OK: Retorna o saldo do usuário.
            404 Not Found: Se o usuário não for encontrado.
            400 Bad Request: Se ocorrer um erro durante o processamento.
            </returns>
            <remarks>
            Exemplo de requisição para obter o saldo de um usuário:
            
            GET /api/Transactions/user/123/balance
            
            Exemplo de resposta com saldo do usuário:
            
            ```json
            {
                "success": true,
                "data": {
                    "userId": 123,
                    "balance": 1000.50
                }
            }
            ```
            
            Caso o usuário não seja encontrado, o retorno será:
            
            ```json
            {
                "success": false,
                "message": "Usuário não encontrado"
            }
            ```
            </remarks>
        </member>
        <member name="M:FinancialAuditApi.Controllers.TransactionsController.CreateTransaction(FinancialAudit.Application.DTOs.CreateTransactionDto)">
             <summary>
             Cria uma nova transação financeira.
             Tipos de transações permitidos: "Deposit", "Withdrawal", "Purchase".
             </summary>
             <param name="transactionDto">Dados da transação a ser criada, incluindo o tipo de transação (Deposit, Withdrawal, Purchase).</param>
             <returns>
             201 Created: Se a transação for criada com sucesso.
             400 Bad Request: Se os dados fornecidos forem inválidos ou ocorrer algum erro durante o processamento.
             </returns>
             <remarks>
             Exemplos de tipos de transações:
             - **Deposit**: Adiciona fundos à conta do usuário.
             - **Withdrawal**: Deduz fundos da conta do usuário.
             - **Purchase**: Deduz fundos como parte de uma compra.
            
             Exemplo de JSON para criação de uma transação:
             
             ```json
             {
                 "userId": 123,
                 "amount": 150.75,
                 "type": "Deposit"
             }
             ```
             
             O campo `transactionDto.Type` deve ser preenchido com um dos seguintes valores:
             - "Deposit" (Depósito)
             - "Withdrawal" (Saque)
             - "Purchase" (Compra)
            
             Além disso, certifique-se de que o saldo do usuário é suficiente para "Withdrawal" ou "Purchase".
             </remarks>
        </member>
    </members>
</doc>
